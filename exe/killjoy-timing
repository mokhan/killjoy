#!/usr/bin/env ruby

require "bundler/setup"
$LOAD_PATH << File.expand_path("../lib", File.dirname(__FILE__))
require "killjoy"

messages_to_process = 1_000

Killjoy::AfterFork.new.call

Killjoy::Publisher.use do |publisher|
  parser = Killjoy::LogParser.new
  log_file = ENV.fetch("LOG_FILE", "spec/fixtures/nginx.log")
  log_file = File.join(Dir.pwd, log_file)
  lines = File.readlines(log_file).take(messages_to_process)
  lines.each do |line|
    publisher.publish(parser.parse(line))
  end
end

cpus = Facter.value('processors')['count'].to_i
configuration = {
  amqp_uri: ENV.fetch("RABBITMQ_URL", "amqp://guest:guest@localhost:5672"),
  exchange: 'killjoy',
  exchange_type: 'x-modulus-hash',
  heartbeat: 2,
  prefetch: cpus,
}
writers = Spank::IOC.resolve_all(:writer)
message_bus = Killjoy::MessageBus.new(configuration)
queue = Queue.new
mutex = Mutex.new
resource = ConditionVariable.new

4.times do |shard|
  consumer = Killjoy::Consumer.new(writers, shard)
  message_bus.run(consumer) do |message|
    queue << message

    message.ack!
    #consumer.work(message)

    puts "[#{Thread.current.object_id}] processed #{queue.size}"
    if queue.size >= messages_to_process
      mutex.synchronize do
        resource.signal
      end
    end
  end
end

mutex.synchronize do
  puts "[#{Thread.current.object_id}] heartbeat #{queue.size}"
  resource.wait(mutex)
  puts "FINISHED"
end
